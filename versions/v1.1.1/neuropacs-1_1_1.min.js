//prettier-ignore
/*!
 * NeuroPACS v1.1.1
 * (c) 2024 Kerrick Cavanaugh
 * Released under the MIT License.
 */
class Neuropacs{constructor(t,e,r="api"){this.apiKey=e,this.serverUrl=t,this.aesKey=this.#t(),this.orderId="",this.client=r,this.connectionId=""}static init(t,e,r="api"){return new Neuropacs(t,e,r)}#e=()=>Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);#r=t=>new Promise(((e,r)=>{const a=document.createElement("script");a.src=t,a.async=!0,a.onload=()=>{e()},a.onerror=()=>{r(new Error(`Script failed to load from ${t}`))},document.head.appendChild(a)}));#t=()=>{const t=new Uint8Array(16);window.crypto.getRandomValues(t);return btoa(String.fromCharCode.apply(null,t))};#a=async t=>{try{t="string"==typeof t?t:JSON.stringify(t)}catch(t){throw{neuropacsError:"Plaintext must be a string or JSON!"}}const e=await this.#n(),r=e.substring(26,e.length-24-1),a=window.atob(r),n=this.#s(a),s=await crypto.subtle.importKey("spki",n,{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt"]),i=await crypto.subtle.encrypt({name:"RSA-OAEP"},s,(new TextEncoder).encode(t));return this.#i(i)};#n=async()=>{try{const t=await fetch(`${this.serverUrl}/api/getPubKey/`);if(!t.ok)throw{neuropacsError:`${await t.text()}`};const e=await t.json();return e.pub_key}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Failed to retrieve the public key.")}};#o=async(t,e,r,a,n,s,i,o)=>new Promise(((c,l)=>{o&&o({datasetId:e,progress:0,status:`Validating part ${parseInt(r)+1}/${a}`});let p=0;const d=setInterval((async()=>{const s=(await this.validateUpload(t,e,n,this.connectionId)).missingFiles;p>=i?(clearInterval(d),c(s)):(0==s.length&&(clearInterval(d),c([])),p++,o({datasetId:e,progress:parseFloat((p/i*100).toFixed(2)),status:`Validating part ${parseInt(r)+1}/${a}`}))}),s)}));#s=t=>{const e=new ArrayBuffer(t.length),r=new Uint8Array(e);for(let e=0,a=t.length;e<a;e++)r[e]=t.charCodeAt(e);return e};#i=t=>{const e=new Uint8Array(t);return btoa(String.fromCharCode.apply(null,e))};#c=()=>{const t=new Date;return`${t.getUTCFullYear()}-${String(t.getUTCMonth()+1).padStart(2,"0")}-${String(t.getUTCDate()).padStart(2,"0")} ${String(t.getUTCHours()).padStart(2,"0")}:${String(t.getUTCMinutes()).padStart(2,"0")}:${String(t.getUTCSeconds()).padStart(2,"0")} UTC`};#l=(t,e)=>{const r=[];let a=0;for(;a<t.size;){const n=Math.min(a+e,t.size);r.push(t.slice(a,n)),a=n}return r};#p=async(t,e)=>{const r=e-t.length%e,a=new Uint8Array(t.length+r);return a.set(t),a};#d=async(t,e,r,a)=>{let n;try{if("string"==r&&"string"==typeof t)n=(new TextEncoder).encode(t);else if("JSON"==r){const e=JSON.stringify(t);n=(new TextEncoder).encode(e)}else{if(!("Uint8Array"==r&&t instanceof Uint8Array))throw new Error("Invalid plaintext format!");n=t}}catch(t){throw t?new Error(t):new Error("Plaintext decoding failed!")}try{const t=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),r=await this.#p(n,16),s=crypto.getRandomValues(new Uint8Array(16)),i=await crypto.subtle.importKey("raw",t,{name:"AES-CTR"},!1,["encrypt"]),o=await crypto.subtle.encrypt({name:"AES-CTR",counter:s,length:128},i,r),c=new Uint8Array(s.length+o.byteLength);if(c.set(s),c.set(new Uint8Array(o),s.length),"string"===a)return btoa(String.fromCharCode.apply(null,c));if("bytes"===a)return c}catch(t){throw t?new Error(t):new Error("AES encryption failed!")}};#h=async(t,e,r)=>{try{const a=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),n=new Uint8Array(atob(t).split("").map((t=>t.charCodeAt(0)))),s=n.slice(0,16),i=n.slice(16),o=await crypto.subtle.importKey("raw",a,{name:"AES-CTR"},!1,["decrypt"]),c=await crypto.subtle.decrypt({name:"AES-CTR",counter:s,length:128},o,i);let l=(new TextDecoder).decode(c);if("JSON"===r)return l=l.trim(),JSON.parse(l);if("string"===r)return l}catch(t){throw t?new Error(t):new Error("AES decryption failed!")}};#u=async(t,e,r)=>{const a=`${this.serverUrl}/api/multipartUploadRequest/`,n=await this.#d(r,this.aesKey,"string","string"),s={datasetId:t,zipIndex:e},i=await this.#d(s,this.aesKey,"JSON","string"),o={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Order-Id":n,Client:this.client},c=await fetch(a,{method:"POST",body:i,headers:o});if(!c.ok){throw{neuropacsError:`${JSON.parse(await c.text()).error}`}}const l=await c.text();return(await this.#h(l,this.aesKey,"JSON")).uploadId};#y=async(t,e,r,a,n)=>{const s=`${this.serverUrl}/api/completeMultipartUpload/`,i={"Content-Type":"text/plain","Order-Id":await this.#d(t,this.aesKey,"string","string"),"Connection-Id":this.connectionId,Client:this.client},o={datasetId:e,uploadId:a,uploadParts:n,zipIndex:r},c=await this.#d(o,this.aesKey,"JSON","string"),l=await fetch(s,{method:"POST",headers:i,body:c});if(!l.ok){throw{neuropacsError:`${JSON.parse(await l.text()).error}`}}return 200};#w=async(t,e,r,a,n,s)=>{const i=await this.#d(a,this.aesKey,"string","string"),o={"Content-Type":"text/plain","connection-id":this.connectionId,"Order-Id":i,client:this.client},c={datasetId:e,uploadId:t,partNumber:n,zipIndex:r},l=await this.#d(c,this.aesKey,"JSON","string"),p=await fetch(`${this.serverUrl}/api/multipartPresignedUrl/`,{method:"POST",headers:o,body:l});if(!p.ok){throw{neuropacsError:`${JSON.parse(await p.text()).error}`}}const d=await p.text(),h=(await this.#h(d,this.aesKey,"JSON")).presignedURL;let u=!1,y="";for(let t=0;t<3;t++){const t=await fetch(h,{method:"PUT",body:s});if(t.ok){return t.headers.get("ETag")}u=!0,y=await t.text()}if(u)throw{neuropacsError:`${y}`}};async connect(){const t={"Content-Type":"text/plain",Client:this.client},e={aes_key:this.aesKey,api_key:this.apiKey};try{const r=await this.#a(e),a=await fetch(`${this.serverUrl}/api/connect/`,{method:"POST",headers:t,body:r});if(!a.ok){throw{neuropacsError:`${JSON.parse(await a.text()).error}`}}const n=(await a.json()).connectionID;return this.connectionId=n,{timestamp:this.#c(),connectionId:n,aesKey:this.aesKey}}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Connection failed!")}}async newJob(){try{const t=`${this.serverUrl}/api/newJob/`,e={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client},r=await fetch(t,{method:"POST",headers:e});if(!r.ok){throw{neuropacsError:`${JSON.parse(await r.text()).error}`}}const a=await r.text(),n=await this.#h(a,this.aesKey,"string");return this.orderId=n,n}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Job creation failed!")}}async uploadDataset(t,e=null,r=null,a=null){null==e&&(e=this.orderId),null==r&&(r=this.#e()),await this.#r("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js");const n=[],s={};let i=0,o=0,c=0,l=0;for(let e=0;e<t.length;e++)if(i+=t[e].size,n.push(t[e].name),c+=t[e].size,s[l]||(s[l]=[],o++),s[l].push(t[e]),c>=25e7&&(l++,c=0),a){const n=parseFloat(((e+1)/t.length*100).toFixed(2));a({datasetId:r,progress:100==n?100:n,status:"Preprocessing"})}let p=[];for(const[n,i]of Object.entries(s)){let s=new JSZip;const c=await this.#u(r,n,e);for(let t=0;t<i.length;t++)if(p.push(i[t].name),s.file(i[t].name,i[t],{binary:!0}),await new Promise((t=>setTimeout(t,0))),a){const e=parseFloat(((t+1)/i.length*100).toFixed(2));a({datasetId:r,progress:100==e?100:e,status:`Compressing part ${parseInt(n)+1}/${o}`})}const l=await s.generateAsync({type:"blob"}),d=5242880,h=this.#l(l,d),u=[];for(let t=0;t<h.length;t++){const s=await this.#w(c,r,n,e,t+1,h[t]);if(u.push({PartNumber:t+1,ETag:s}),a){const e=parseFloat(((t+1)/h.length*100).toFixed(2));a({datasetId:r,progress:100==e?100:e,status:`Uploading part ${parseInt(n)+1}/${o}`})}}if(await this.#y(e,r,n,c,u),a){const e=parseFloat((i.length/t.length*100).toFixed(2));a({datasetId:r,progress:100==e?100:e,status:`Uploading part ${parseInt(n)+1}/${o}`})}}let d=[];for(const[t,n]of Object.entries(s)){const s=n.map((t=>t.name)),i=await this.#o(s,r,t,o,e,1e3,100+2.5*(t+1),a);d=[...d,...i]}return 0==d.length?{datasetId:r,state:"success"}:{datasetId:r,state:"failure",missingFiles:d}}async validateUpload(t,e,r=null,a=null){null==r&&(r=this.orderId),null==a&&(a=this.connectionId);try{const a=await this.#d(r,this.aesKey,"string","string"),n=`${this.serverUrl}/api/verifyUpload/`,s={"Content-Type":"text/plain","Dataset-Id":e,"Order-Id":a,"Connection-Id":this.connectionId,Client:this.client},i={fileArray:t},o=await this.#d(i,this.aesKey,"JSON","string"),c=await fetch(n,{method:"POST",headers:s,body:o});if(!c.ok){throw{neuropacsError:`${JSON.parse(await c.text()).error}`}}const l=await c.text();return await this.#h(l,this.aesKey,"JSON")}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Dataset validation failed!")}}async runJob(t,e=null,r=null){null==e&&(e=this.orderId);try{const a=`${this.serverUrl}/api/runJob/`,n={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client},s={orderID:e,productID:t,datasetID:r},i=await this.#d(s,this.aesKey,"JSON","string"),o=await fetch(a,{method:"POST",headers:n,body:i});if(!o.ok){throw{neuropacsError:`${JSON.parse(await o.text()).error}`}}return o.status}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Job run failed!")}}async checkStatus(t=null,e=null){null==t&&(t=this.orderId);try{const r=`${this.serverUrl}/api/checkStatus/`,a={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client},n={orderID:t,datasetID:e},s=await this.#d(n,this.aesKey,"JSON","string"),i=await fetch(r,{method:"POST",headers:a,body:s});if(!i.ok){throw{neuropacsError:`${JSON.parse(await i.text()).error}`}}const o=await i.text();return await this.#h(o,this.aesKey,"JSON")}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Status check failed.")}}async getResults(t,e=null,r=null){null==e&&(e=this.orderId);try{const a=`${this.serverUrl}/api/getResults/`,n={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client};if(!["TXT","XML","JSON"].includes(t))throw{neuropacsError:'Invalid format! Valid formats include: "TXT", "JSON", "XML"'};const s={orderID:e,format:t,datasetID:r},i=await this.#d(s,this.aesKey,"JSON","string"),o=await fetch(a,{method:"POST",headers:n,body:i});if(!o.ok){throw{neuropacsError:`${JSON.parse(await o.text()).error}`}}const c=await o.text();return await this.#h(c,this.aesKey,"string")}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Result retrieval failed!")}}}
window.Neuropacs = Neuropacs;
