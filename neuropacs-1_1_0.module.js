//prettier-ignore
/*!
 * NeuroPACS v1.1.0
 * (c) 2024 Kerrick Cavanaugh
 * Released under the MIT License.
 */
class Neuropacs{constructor(t,e,r="api"){this.apiKey=e,this.serverUrl=t,this.aesKey=this.#t(),this.orderId="",this.client=r,this.connectionId=""}static init(t,e,r="api"){return new Neuropacs(t,e,r)}#e=()=>Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);#r=t=>new Promise(((e,r)=>{const n=document.createElement("script");n.src=t,n.async=!0,n.onload=()=>{e()},n.onerror=()=>{r(new Error(`Script failed to load from ${t}`))},document.head.appendChild(n)}));#t=()=>{const t=new Uint8Array(16);window.crypto.getRandomValues(t);return btoa(String.fromCharCode.apply(null,t))};#n=async t=>{try{t="string"==typeof t?t:JSON.stringify(t)}catch(t){throw{neuropacsError:"Plaintext must be a string or JSON!"}}const e=await this.#a(),r=e.substring(26,e.length-24-1),n=window.atob(r),a=this.#i(n),i=await crypto.subtle.importKey("spki",a,{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt"]),o=await crypto.subtle.encrypt({name:"RSA-OAEP"},i,(new TextEncoder).encode(t));return this.#o(o)};#a=async()=>{try{const t=await fetch(`${this.serverUrl}/api/getPubKey/`);if(!t.ok)throw{neuropacsError:`${await t.text()}`};const e=await t.json();return e.pub_key}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Failed to retrieve the public key.")}};#i=t=>{const e=new ArrayBuffer(t.length),r=new Uint8Array(e);for(let e=0,n=t.length;e<n;e++)r[e]=t.charCodeAt(e);return e};#o=t=>{const e=new Uint8Array(t);return btoa(String.fromCharCode.apply(null,e))};#s=()=>{const t=new Date;return`${t.getUTCFullYear()}-${String(t.getUTCMonth()+1).padStart(2,"0")}-${String(t.getUTCDate()).padStart(2,"0")} ${String(t.getUTCHours()).padStart(2,"0")}:${String(t.getUTCMinutes()).padStart(2,"0")}:${String(t.getUTCSeconds()).padStart(2,"0")} UTC`};#c=(t,e)=>{const r=[];let n=0;for(;n<t.size;){const a=Math.min(n+e,t.size);r.push(t.slice(n,a)),n=a}return r};#l=async(t,e)=>{const r=e-t.length%e,n=new Uint8Array(t.length+r);return n.set(t),n};#h=async(t,e,r,n)=>{let a;try{if("string"==r&&"string"==typeof t)a=(new TextEncoder).encode(t);else if("JSON"==r){const e=JSON.stringify(t);a=(new TextEncoder).encode(e)}else{if(!("Uint8Array"==r&&t instanceof Uint8Array))throw new Error("Invalid plaintext format!");a=t}}catch(t){throw t?new Error(t):new Error("Plaintext decoding failed!")}try{const t=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),r=await this.#l(a,16),i=crypto.getRandomValues(new Uint8Array(16)),o=await crypto.subtle.importKey("raw",t,{name:"AES-CTR"},!1,["encrypt"]),s=await crypto.subtle.encrypt({name:"AES-CTR",counter:i,length:128},o,r),c=new Uint8Array(i.length+s.byteLength);if(c.set(i),c.set(new Uint8Array(s),i.length),"string"===n)return btoa(String.fromCharCode.apply(null,c));if("bytes"===n)return c}catch(t){throw t?new Error(t):new Error("AES encryption failed!")}};#p=async(t,e,r)=>{try{const n=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),a=new Uint8Array(atob(t).split("").map((t=>t.charCodeAt(0)))),i=a.slice(0,16),o=a.slice(16),s=await crypto.subtle.importKey("raw",n,{name:"AES-CTR"},!1,["decrypt"]),c=await crypto.subtle.decrypt({name:"AES-CTR",counter:i,length:128},s,o);let l=(new TextDecoder).decode(c);if("JSON"===r)return l=l.trim(),JSON.parse(l);if("string"===r)return l}catch(t){throw t?new Error(t):new Error("AES decryption failed!")}};#d=async(t,e)=>{const r=`${this.serverUrl}/api/multipartUploadRequest/`,n=await this.#h(e,this.aesKey,"string","string"),a={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Order-Id":n,Client:this.client,"Dataset-Id":t},i=await fetch(r,{method:"GET",headers:a});if(!i.ok){throw{neuropacsError:`${JSON.parse(await i.text()).error}`}}const o=await i.text();return(await this.#p(o,this.aesKey,"JSON")).uploadId};#y=async(t,e,r,n)=>{const a=`${this.serverUrl}/api/completeMultipartUpload/`,i={"Content-Type":"text/plain","Order-Id":await this.#h(t,this.aesKey,"string","string"),"Connection-Id":this.connectionId,Client:this.client},o={datasetId:e,uploadId:r,uploadParts:n},s=await this.#h(o,this.aesKey,"JSON","string"),c=await fetch(a,{method:"POST",headers:i,body:s});if(!c.ok){throw{neuropacsError:`${JSON.parse(await c.text()).error}`}}return 200};#u=async(t,e,r,n,a)=>{const i=await this.#h(r,this.aesKey,"string","string"),o={"Content-Type":"text/plain","connection-id":this.connectionId,"Order-Id":i,client:this.client},s={datasetId:e,uploadId:t,partNumber:n},c=await this.#h(s,this.aesKey,"JSON","string"),l=await fetch(`${this.serverUrl}/api/multipartPresignedUrl/`,{method:"POST",headers:o,body:c});if(!l.ok){throw{neuropacsError:`${JSON.parse(await l.text()).error}`}}const h=await l.text(),p=(await this.#p(h,this.aesKey,"JSON")).presignedURL;let d=!1,y="";for(let t=0;t<3;t++){const t=await fetch(p,{method:"PUT",body:a});if(t.ok){return t.headers.get("ETag")}d=!0,y=await t.text()}if(d)throw{neuropacsError:`${y}`}};async connect(){const t={"Content-Type":"text/plain",Client:this.client},e={aes_key:this.aesKey,api_key:this.apiKey};try{const r=await this.#n(e),n=await fetch(`${this.serverUrl}/api/connect/`,{method:"POST",headers:t,body:r});if(!n.ok){throw{neuropacsError:`${JSON.parse(await n.text()).error}`}}const a=(await n.json()).connectionID;return this.connectionId=a,{timestamp:this.#s(),connectionId:a,aesKey:this.aesKey}}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Connection failed!")}}async newJob(){try{const t=`${this.serverUrl}/api/newJob/`,e={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client},r=await fetch(t,{method:"POST",headers:e});if(!r.ok){throw{neuropacsError:`${JSON.parse(await r.text()).error}`}}const n=await r.text(),a=await this.#p(n,this.aesKey,"string");return this.orderId=a,a}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Job creation failed!")}}async uploadDataset(t,e=null,r=null,n=null){null==r&&(r=this.orderId),null==e&&(e=this.#e()),await this.#r("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js");const a=await this.#d(e,r);let i=new JSZip;for(let r=0;r<t.length;r++)if(i.file(t[r].name,t[r],{binary:!0}),await new Promise((t=>setTimeout(t,0))),n){const a=parseFloat(((r+1)/t.length*100).toFixed(2));n({datasetId:e,progress:100==a?100:a,status:"Compressing"})}const o=await i.generateAsync({type:"blob"}),s=this.#c(o,5242880),c=[];for(let t=0;t<s.length;t++){const i=await this.#u(a,e,r,t+1,s[t]);if(c.push({PartNumber:t+1,ETag:i}),n){const r=parseFloat(((t+1)/s.length*100).toFixed(2));n({datasetId:e,progress:100==r?100:r,status:"Uploading"})}}return await this.#y(r,e,a,c),e}async validateUpload(t,e,r=null,n=null){null==r&&(r=this.orderId),null==n&&(n=this.connectionId);try{const n=await this.#h(r,this.aesKey,"string","string"),a=`${this.serverUrl}/api/verifyUpload/`,i={"Content-Type":"text/plain","Dataset-Id":e,"Order-Id":n,"Connection-Id":this.connectionId,Client:this.client},o={fileArray:t},s=await this.#h(o,this.aesKey,"JSON","string"),c=await fetch(a,{method:"POST",headers:i,body:s});if(!c.ok){throw{neuropacsError:`${JSON.parse(await c.text()).error}`}}const l=await c.text();return await this.#p(l,this.aesKey,"JSON")}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Dataset validation failed!")}}async runJob(t,e=null,r=null){null==e&&(e=this.orderId);try{const n=`${this.serverUrl}/api/runJob/`,a={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client},i={orderID:e,productID:t,datasetID:r},o=await this.#h(i,this.aesKey,"JSON","string"),s=await fetch(n,{method:"POST",headers:a,body:o});if(!s.ok){throw{neuropacsError:`${JSON.parse(await s.text()).error}`}}return s.status}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Job run failed!")}}async checkStatus(t=null,e=null){null==t&&(t=this.orderId);try{const r=`${this.serverUrl}/api/checkStatus/`,n={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client},a={orderID:t,datasetID:e},i=await this.#h(a,this.aesKey,"JSON","string"),o=await fetch(r,{method:"POST",headers:n,body:i});if(!o.ok){throw{neuropacsError:`${JSON.parse(await o.text()).error}`}}const s=await o.text();return await this.#p(s,this.aesKey,"JSON")}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Status check failed.")}}async getResults(t,e=null,r=null){null==e&&(e=this.orderId);try{const n=`${this.serverUrl}/api/getResults/`,a={"Content-Type":"text/plain","Connection-Id":this.connectionId,Client:this.client};if(!["TXT","XML","JSON"].includes(t))throw{neuropacsError:'Invalid format! Valid formats include: "TXT", "JSON", "XML"'};const i={orderID:e,format:t,datasetID:r},o=await this.#h(i,this.aesKey,"JSON","string"),s=await fetch(n,{method:"POST",headers:a,body:o});if(!s.ok){throw{neuropacsError:`${JSON.parse(await s.text()).error}`}}const c=await s.text();return await this.#p(c,this.aesKey,"string")}catch(t){throw t.neuropacsError?new Error(t.neuropacsError):new Error("Result retrieval failed!")}}}
module.exports = Neuropacs;
