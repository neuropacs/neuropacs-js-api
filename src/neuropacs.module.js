//prettier-ignore
/*!
 * NeuroPACS v1.1.8
 * (c) 2024 Kerrick Cavanaugh
 * Released under the MIT License.
 */
class Neuropacs{constructor(t,e,r="API"){this.apiKey=e,this.serverUrl=t,this.aesKey=null,this.originType=r,this.connectionId=null,this.maxZipSize=15728640}static init({serverUrl:t,apiKey:e,originType:r="api"}){return new Neuropacs(t,e,r)}#t=()=>{try{return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){const e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))}catch(t){throw new Error(`UUID generation failed: ${t.message||t.toString()}`)}};#e=t=>new Promise(((e,r)=>{const n=document.createElement("script");n.src=t,n.async=!0,n.onload=()=>{e()},n.onerror=()=>{r(new Error("Script failed to load."))},document.head.appendChild(n)}));#r=()=>{try{const t=new Uint8Array(16);window.crypto.getRandomValues(t);return btoa(String.fromCharCode.apply(null,t))}catch(t){throw new Error(`AES key generation failed: ${t.message||t.toString()}`)}};#n=async t=>{try{t="string"==typeof t?t:JSON.stringify(t)}catch(t){throw new RangeError("Plaintext must be a string or JSON.")}try{const e=await this.#a(),r="-----BEGIN PUBLIC KEY-----",n="-----END PUBLIC KEY-----",a=e.substring(r.length,e.length-n.length-1),i=window.atob(a),s=this.#i(i),o=await crypto.subtle.importKey("spki",s,{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt"]),c=await crypto.subtle.encrypt({name:"RSA-OAEP"},o,(new TextEncoder).encode(t));return this.#s(c)}catch(t){throw new Error(`OAEP encryption failed: ${t.message||t.toString()}`)}};#a=async()=>{const t={"Origin-Type":this.originType};try{const e=await fetch(`${this.serverUrl}/api/getPubKey/`,{method:"GET",headers:t});if(!e.ok){if(403==e.status)throw new Error("CORS error.");throw new Error(JSON.parse(await e.text()).error)}const r=await e.json();return r.pub_key}catch(t){throw new Error(`Retrieval of public key failed: ${t.message||t.toString()}`)}};#i=t=>{try{const e=new ArrayBuffer(t.length),r=new Uint8Array(e);for(let e=0,n=t.length;e<n;e++)r[e]=t.charCodeAt(e);return e}catch(t){throw new Error(`String to array buffer conversion failed: ${t.message||t.toString()}`)}};#s=t=>{try{const e=new Uint8Array(t);return btoa(String.fromCharCode.apply(null,e))}catch(t){throw new Error(`Array buffer to base64 conversion failed: ${t.message||t.toString()}`)}};#o=()=>{const t=new Date;return`${t.getUTCFullYear()}-${String(t.getUTCMonth()+1).padStart(2,"0")}-${String(t.getUTCDate()).padStart(2,"0")} ${String(t.getUTCHours()).padStart(2,"0")}:${String(t.getUTCMinutes()).padStart(2,"0")}:${String(t.getUTCSeconds()).padStart(2,"0")} UTC`};#c=(t,e)=>{try{const r=[];let n=0;for(;n<t.size;){const a=Math.min(n+e,t.size);r.push(t.slice(n,a)),n=a}return r}catch(t){throw new Error(`Partitioning blob failed: ${t.message||t.toString()}`)}};#p=(t,e)=>{if(e<=0)throw new Error("Chunk size must be greater than 0");const r=[];for(let n=0;n<t.length;n+=e){const a=t.slice(n,n+e);r.push(a)}return r};#h=async(t,e)=>{try{const r=e-t.length%e,n=new Uint8Array(t.length+r);return n.set(t),n}catch(t){throw new Error(`AES padding failed : ${t.message||t.toString()}`)}};#l=async(t,e,r,n)=>{let a;if("string"==r&&"string"==typeof t)a=(new TextEncoder).encode(t);else if("JSON"==r){const e=JSON.stringify(t);a=(new TextEncoder).encode(e)}else{if(!("Uint8Array"==r&&t instanceof Uint8Array))throw new Error("Invalid plaintext format!");a=t}try{const t=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),r=await this.#h(a,16),i=crypto.getRandomValues(new Uint8Array(16)),s=await crypto.subtle.importKey("raw",t,{name:"AES-CTR"},!1,["encrypt"]),o=await crypto.subtle.encrypt({name:"AES-CTR",counter:i,length:128},s,r),c=new Uint8Array(i.length+o.byteLength);if(c.set(i),c.set(new Uint8Array(o),i.length),"string"===n)return btoa(String.fromCharCode.apply(null,c));if("bytes"===n)return c;throw new Error("Invalid output format")}catch(t){throw new Error(`AES encrption failed: ${t.message||t.toString()}`)}};#d=(t,e)=>{let r=!1;e.includes(".")&&(r=!0);const n=r?e.replace(/\.[^/.]+$/,""):e,a=r?e.split(".").pop():"";let i=1,s=e;for(;t.has(s);)s=r?`${n}_${i}.${a}`:`${n}_${i}`,i++;return t.add(s),s};#w=async(t,e,r)=>{try{const n=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),a=new Uint8Array(atob(t).split("").map((t=>t.charCodeAt(0)))),i=a.slice(0,16),s=a.slice(16),o=await crypto.subtle.importKey("raw",n,{name:"AES-CTR"},!1,["decrypt"]),c=await crypto.subtle.decrypt({name:"AES-CTR",counter:i,length:128},o,s);let p=(new TextDecoder).decode(c);if("JSON"===r)return p=p.trim(),JSON.parse(p);if("string"===r)return p;if("Uint8Array"===r)return bytes(p);throw new Error("Invalid output format")}catch(t){throw new Error(`AES decryption failed: ${t.message||t.toString()}`)}};#y=async(t,e,r)=>{try{const n=`${this.serverUrl}/api/multipartUploadRequest/`,a={datasetId:t,zipIndex:e,orderId:r},i=await this.#l(a,this.aesKey,"JSON","string"),s={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},o=await fetch(n,{method:"POST",body:i,headers:s});if(!o.ok)throw new Error(JSON.parse(await o.text()).error);const c=await o.text();return(await this.#w(c,this.aesKey,"JSON")).uploadId}catch(t){throw new Error(`Multipart upload initialization failed: ${t.message||t.toString()}`)}};#g=async(t,e,r,n,a)=>{try{const i=`${this.serverUrl}/api/completeMultipartUpload/`,s={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},o={datasetId:e,uploadId:n,uploadParts:a,zipIndex:r,orderId:t},c=await this.#l(o,this.aesKey,"JSON","string"),p=await fetch(i,{method:"POST",headers:s,body:c});if(!p.ok)throw new Error(JSON.parse(await p.text()).error);return 200}catch(t){throw new Error(`Multipart upload completion failed: ${t.message||t.toString()}`)}};#u=async(t,e,r,n,a,i)=>{try{const s={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},o={datasetId:e,uploadId:t,partNumber:a,zipIndex:r,orderId:n},c=await this.#l(o,this.aesKey,"JSON","string"),p=await fetch(`${this.serverUrl}/api/multipartPresignedUrl/`,{method:"POST",headers:s,body:c});if(!p.ok)throw new Error(JSON.parse(await p.text()).error);const h=await p.text(),l=(await this.#w(h,this.aesKey,"JSON")).presignedUrl;let d=!1;for(let t=0;t<3;t++){const t=await fetch(l,{method:"PUT",body:i});if(t.ok){return t.headers.get("ETag")}d=!0,failText=await t.text()}if(d)throw new Error("Upload failed after 3 attempts")}catch(t){throw new Error(`Upload part failed: ${error.message||error.toString()}`)}};#f=t=>{console.log(t);const e=t.split(";");for(let t of e)if(t=t.trim(),t.startsWith("boundary=")){let e=t.slice(9);return e.startsWith('"')&&e.endsWith('"')&&(e=e.slice(1,-1)),e}return""};async connect(){try{const t={"Content-Type":"text/plain","Origin-Type":this.originType,"X-Api-Key":this.apiKey},e=this.#r();this.aesKey=e;const r={aes_key:e},n=await this.#n(r),a=await fetch(`${this.serverUrl}/api/connect/`,{method:"POST",headers:t,body:n});if(!a.ok)throw new Error(JSON.parse(await a.text()).error);const i=(await a.json()).connectionId;return this.connectionId=i,{timestamp:this.#o(),connectionId:i,aesKey:this.aesKey}}catch(t){throw new Error(`Connection creation failed: ${t.message||t.toString()}`)}}async newJob(){try{if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const t=`${this.serverUrl}/api/newJob/`,e={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},r=await fetch(t,{method:"GET",headers:e});if(!r.ok)throw new Error(JSON.parse(await r.text()).error);const n=await r.text(),a=await this.#w(n,this.aesKey,"JSON");return this.orderId=a.orderId,a.orderId}catch(t){throw new Error(`Job creation failed: ${t.message||t.toString()}`)}}async uploadDatasetFromFileArray({orderId:t,fileArray:e,callback:r=null}){try{if(!e||!t)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");if(!e instanceof FileList)throw new Error("Dataset must be an array of files");await this.#e("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js");const n=new Set;let a=0,i=0,s=1,o=new JSZip;for(let c=0;c<e.length;c++){if(!e[c]instanceof File)throw new Error("Invalid object in datset");let p=e[c].name;const h=e[c].size,l=this.#d(n,p);if(i+h>this.maxZipSize){const e=await o.generateAsync({type:"blob"}),r=s-1,n=await this.#y(t,String(r),t),a=await this.#u(n,t,String(r),t,s,e);await this.#g(t,t,String(r),n,[{PartNumber:s,ETag:a}]),o=new JSZip,i=0,s++}if(o.file(l,e[c],{binary:!0}),i+=h,a++,r){const n=parseFloat((a/e.length*100).toFixed(2));r({orderId:t,progress:parseFloat(n),status:`Uploading file ${a}/${e.length}`})}}if(i>0){const e=await o.generateAsync({type:"blob"}),r=s-1,n=await this.#y(t,String(r),t),a=await this.#u(n,t,String(r),t,s,e);await this.#g(t,t,String(r),n,[{PartNumber:s,ETag:a}])}return!0}catch(t){throw new Error(`Error uploading study from path: ${t.message||t.toString()}`)}}async uploadDatasetFromDicomWeb({orderId:t,dicomWebBaseUrl:e,studyUid:r,username:n=null,password:a=null,callback:i=null}){try{if(!t||!e||!r)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");let s;await this.#e("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"),await this.#e("https://unpkg.com/dicomweb-client"),s=n&&a?new DICOMwebClient.api.DICOMwebClient({url:e,username:n,password:a}):new DICOMwebClient.api.DICOMwebClient({url:e}),i&&i({order_id:t,progress:0,status:`Retrieving instances from DICOMweb for study ${r}`});const o=await s.retrieveStudy({studyInstanceUID:r});if(i&&i({order_id:t,progress:100,status:`Retrieving instances from DICOMweb for study ${r}`}),!o||0===o.length)throw new Error(`No instances recieved from DICOMweb for study ${r}`);let c=0,p=new JSZip;const h=o.length;let l=1;for(let e=0;e<o.length;e++){let r=o[e];const n=this.#t(),a=r,s=a.byteLength;if(c+s>this.maxZipSize){const e=await p.generateAsync({type:"blob"}),r=l-1,n=await this.#y(t,String(r),t),a=await this.#u(n,t,String(r),t,l,e);await this.#g(t,t,String(r),n,[{PartNumber:l,ETag:a}]),p=new JSZip,c=0,l+=1}if(p.file(n,a),c+=s,i){let r=(e+1)/h*100;r=Math.round(100*r)/100,r=100===r?100:r,i({order_id:t,progress:r,status:`Uploaded instance ${e+1}/${o.length}`})}}if(c>0){const e=await p.generateAsync({type:"blob"}),r=l-1,n=await this.#y(t,String(r),t),a=await this.#u(n,t,String(r),t,l,e);await this.#g(t,t,String(r),n,[{PartNumber:l,ETag:a}])}return!0}catch(t){throw new Error(`Error uploading study from DICOMweb: ${t.message||t.toString()}`)}}async runJob({orderId:t,productName:e}){try{if(!t||!e)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const r=`${this.serverUrl}/api/runJob/`,n={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},a={orderId:t,productName:e},i=await this.#l(a,this.aesKey,"JSON","string"),s=await fetch(r,{method:"POST",headers:n,body:i});if(!s.ok)throw new Error(JSON.parse(await s.text()).error);return s.status}catch(t){throw new Error(`Job run failed: ${t.message||t.toString()}`)}}async checkStatus({orderId:t}){try{if(!t)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const e=`${this.serverUrl}/api/checkStatus/`,r={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},n={orderId:t},a=await this.#l(n,this.aesKey,"JSON","string"),i=await fetch(e,{method:"POST",headers:r,body:a});if(!i.ok)throw new Error(JSON.parse(await i.text()).error);const s=await i.text();return await this.#w(s,this.aesKey,"JSON")}catch(t){throw new Error(`Status check failed: ${t.message||t.toString()}`)}}async getResults({orderId:t,format:e,dataType:r="raw"}){try{if(!t||!e||!r)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const n=`${this.serverUrl}/api/getResults/`,a={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType};e=String(e).toLowerCase(),r=String(r).toLowerCase();if(!["txt","xml","json","png"].includes(e))throw new Error("Invalid format");const i={orderId:t,format:e},s=await this.#l(i,this.aesKey,"JSON","string"),o=await fetch(n,{method:"POST",headers:a,body:s});if(!o.ok)throw new Error(JSON.parse(await o.text()).error);const c=await o.text();let p;switch(e){case"txt":case"json":case"xml":p=await this.#w(c,this.aesKey,"string");break;case"png":p=await this.#w(c,this.aesKey,"Uint8Array")}if("raw"===r)return p;if("blob"!==r)throw new Error("Invalid data type.");switch(e){case"txt":return new Blob([p],{type:"text/plain"});case"json":return new Blob([p],{type:"application/json"});case"xml":return new Blob([p],{type:"application/xml"});case"png":return new Blob([p],{type:"image/png"})}}catch(t){throw new Error(`Result retrieval failed: ${t.message||t.toString()}`)}}}
module.exports = Neuropacs;
