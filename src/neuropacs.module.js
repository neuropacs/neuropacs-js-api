//prettier-ignore
/*!
 * neuropacs JavaScript API v1.2.0
 * (c) 2025 neuropacs
 * Released under the MIT License.
 */
class Neuropacs{constructor(t,e,r="API"){this.apiKey=e,this.serverUrl=t,this.aesKey=null,this.originType=r,this.connectionId=null,this.maxZipSize=15728640,this.#t=this.#e(this.#t.bind(this),3,1e3),this.#r=this.#e(this.#r.bind(this),3,1e3),this.#a=this.#e(this.#a.bind(this),3,1e3)}static init({serverUrl:t,apiKey:e,originType:r="api"}){return new Neuropacs(t,e,r)}#i=()=>{try{return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){const e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))}catch(t){throw new Error(`UUID generation failed: ${t.message||t.toString()}`)}};#n=t=>new Promise(((e,r)=>{const a=document.createElement("script");a.src=t,a.async=!0,a.onload=()=>{e()},a.onerror=()=>{r(new Error("Script failed to load."))},document.head.appendChild(a)}));#s=()=>{try{const t=new Uint8Array(16);window.crypto.getRandomValues(t);return btoa(String.fromCharCode.apply(null,t))}catch(t){throw new Error(`AES key generation failed: ${t.message||t.toString()}`)}};#o=async t=>{try{t="string"==typeof t?t:JSON.stringify(t)}catch(t){throw new RangeError("Plaintext must be a string or JSON.")}try{const e=await this.#c(),r="-----BEGIN PUBLIC KEY-----",a="-----END PUBLIC KEY-----",i=e.substring(r.length,e.length-a.length-1),n=window.atob(i),s=this.#h(n),o=await crypto.subtle.importKey("spki",s,{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt"]),c=await crypto.subtle.encrypt({name:"RSA-OAEP"},o,(new TextEncoder).encode(t));return this.#w(c)}catch(t){throw new Error(`OAEP encryption failed: ${t.message||t.toString()}`)}};#c=async()=>{const t={"Origin-Type":this.originType};try{const e=await fetch(`${this.serverUrl}/api/getPubKey/`,{method:"GET",headers:t});if(!e.ok){if(403==e.status)throw new Error("CORS error.");throw new Error(JSON.parse(await e.text()).error)}const r=await e.json();return r.pub_key}catch(t){throw new Error(`Retrieval of public key failed: ${t.message||t.toString()}`)}};#h=t=>{try{const e=new ArrayBuffer(t.length),r=new Uint8Array(e);for(let e=0,a=t.length;e<a;e++)r[e]=t.charCodeAt(e);return e}catch(t){throw new Error(`String to array buffer conversion failed: ${t.message||t.toString()}`)}};#w=t=>{try{const e=new Uint8Array(t);return btoa(String.fromCharCode.apply(null,e))}catch(t){throw new Error(`Array buffer to base64 conversion failed: ${t.message||t.toString()}`)}};#d=()=>{const t=new Date;return`${t.getUTCFullYear()}-${String(t.getUTCMonth()+1).padStart(2,"0")}-${String(t.getUTCDate()).padStart(2,"0")} ${String(t.getUTCHours()).padStart(2,"0")}:${String(t.getUTCMinutes()).padStart(2,"0")}:${String(t.getUTCSeconds()).padStart(2,"0")} UTC`};#p=async(t,e)=>{try{const r=e-t.length%e,a=new Uint8Array(t.length+r);return a.set(t),a}catch(t){throw new Error(`AES padding failed : ${t.message||t.toString()}`)}};#l=async(t,e,r,a)=>{let i;if("string"==r&&"string"==typeof t)i=(new TextEncoder).encode(t);else if("JSON"==r){const e=JSON.stringify(t);i=(new TextEncoder).encode(e)}else{if(!("Uint8Array"==r&&t instanceof Uint8Array))throw new Error("Invalid plaintext format!");i=t}try{const t=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),r=await this.#p(i,16),n=crypto.getRandomValues(new Uint8Array(16)),s=await crypto.subtle.importKey("raw",t,{name:"AES-CTR"},!1,["encrypt"]),o=await crypto.subtle.encrypt({name:"AES-CTR",counter:n,length:128},s,r),c=new Uint8Array(n.length+o.byteLength);if(c.set(n),c.set(new Uint8Array(o),n.length),"string"===a)return btoa(String.fromCharCode.apply(null,c));if("bytes"===a)return c;throw new Error("Invalid output format")}catch(t){throw new Error(`AES encrption failed: ${t.message||t.toString()}`)}};#y=(t,e)=>{let r=!1;e.includes(".")&&(r=!0);const a=r?e.replace(/\.[^/.]+$/,""):e,i=r?e.split(".").pop():"";let n=1,s=e;for(;t.has(s);)s=r?`${a}_${n}.${i}`:`${a}_${n}`,n++;return t.add(s),s};#g=async(t,e,r)=>{try{const a=new Uint8Array(atob(e).split("").map((t=>t.charCodeAt(0)))),i=new Uint8Array(atob(t).split("").map((t=>t.charCodeAt(0)))),n=i.slice(0,16),s=i.slice(16),o=await crypto.subtle.importKey("raw",a,{name:"AES-CTR"},!1,["decrypt"]),c=await crypto.subtle.decrypt({name:"AES-CTR",counter:n,length:128},o,s);let h=(new TextDecoder).decode(c);if("JSON"===r)return h=h.trim(),JSON.parse(h);if("string"===r)return h;if("Uint8Array"===r)return c;throw new Error("Invalid output format")}catch(t){throw new Error(`AES decryption failed: ${t.message||t.toString()}`)}};#e(t,e=3,r=1e3){return async function(...a){let i,n=0;for(;n<e;)try{return await t(...a)}catch(t){i=t,n++,n<e&&await new Promise((t=>setTimeout(t,r)))}throw i}}#t=async(t,e,r)=>{try{const a=`${this.serverUrl}/api/multipartUploadRequest/`,i={datasetId:t,zipIndex:e,orderId:r},n=await this.#l(i,this.aesKey,"JSON","string"),s={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},o=await fetch(a,{method:"POST",body:n,headers:s});if(!o.ok)throw new Error(JSON.parse(await o.text()).error);const c=await o.text();return(await this.#g(c,this.aesKey,"JSON")).uploadId}catch(t){throw new Error(`Multipart upload initialization failed: ${t.message||t.toString()}`)}};#r=async(t,e,r,a,i,n)=>{try{const s=`${this.serverUrl}/api/completeMultipartUpload/`,o={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},c={datasetId:e,uploadId:a,uploadParts:i,zipIndex:r,orderId:t,finalPart:n},h=await this.#l(c,this.aesKey,"JSON","string"),w=await fetch(s,{method:"POST",headers:o,body:h});if(!w.ok)throw new Error(JSON.parse(await w.text()).error);return 200}catch(t){throw new Error(`Multipart upload completion failed: ${t.message||t.toString()}`)}};#a=async(t,e,r,a,i,n)=>{try{let s;const o={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},c={datasetId:e,uploadId:t,partNumber:i,zipIndex:r,orderId:a},h=await this.#l(c,this.aesKey,"JSON","string");if(s=await fetch(`${this.serverUrl}/api/multipartPresignedUrl/`,{method:"POST",headers:o,body:h}),!s.ok)throw new Error(JSON.parse(await s.text()).error);const w=await s.text(),d=(await this.#g(w,this.aesKey,"JSON")).presignedUrl;if(!d)throw new Error("Presigned URL not present in AWS response.");if(s=await fetch(d,{method:"PUT",body:n}),!s.ok)throw new Error(await s.text());const p=s.headers.get("ETag");if(!p)throw new Error("Etag header not present in AWS response.");return p}catch(t){throw new Error(`Upload part failed: ${t.message||t.toString()}`)}};async connect(){try{const t={"Content-Type":"text/plain","Origin-Type":this.originType,"X-Api-Key":this.apiKey},e=this.#s();this.aesKey=e;const r={aes_key:e},a=await this.#o(r),i=await fetch(`${this.serverUrl}/api/connect/`,{method:"POST",headers:t,body:a});if(!i.ok)throw new Error(JSON.parse(await i.text()).error);const n=(await i.json()).connectionId;return this.connectionId=n,{timestamp:this.#d(),connectionId:n,aesKey:this.aesKey}}catch(t){throw new Error(`Connection creation failed: ${t.message||t.toString()}`)}}async newJob(){try{if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const t=`${this.serverUrl}/api/newJob/`,e={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},r=await fetch(t,{method:"GET",headers:e});if(!r.ok)throw new Error(JSON.parse(await r.text()).error);const a=await r.text(),i=await this.#g(a,this.aesKey,"JSON");return this.orderId=i.orderId,i.orderId}catch(t){throw new Error(`Job creation failed: ${t.message||t.toString()}`)}}async uploadDatasetFromFileArray({orderId:t,fileArray:e,callback:r=null}){try{if(!e||!t)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");if(!(e instanceof FileList||Array.isArray(e)&&e.every((t=>t instanceof File))))throw new Error("Dataset must be an array of files or a FileList");await this.#n("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js");const a=new Set;let i=0,n=1,s=new JSZip,o=0;for(let c=0;c<e.length;c++){const h=e[c],w=h.name,d=h.size,p=this.#y(a,w);if(o+d>this.maxZipSize&&o>0){const r=await s.generateAsync({type:"blob"}),a=n,c=await this.#t(t,String(a),t),h=await this.#a(c,t,String(a),t,1,r);i-1==e.length?await this.#r(t,t,String(a),c,[{PartNumber:1,ETag:h}],1):await this.#r(t,t,String(a),c,[{PartNumber:1,ETag:h}],0),s=new JSZip,o=0,n++}if(s.file(p,h,{binary:!0}),o+=d,i++,r){r({orderId:t,progress:parseFloat((i/e.length*100).toFixed(2)),status:`Uploading file ${i}/${e.length}`})}}if(o>0){const e=await s.generateAsync({type:"blob",compression:"STORE"}),r=n,a=await this.#t(t,String(r),t),i=await this.#a(a,t,String(r),t,1,e);await this.#r(t,t,String(r),a,[{PartNumber:1,ETag:i}],1)}return!0}catch(t){throw new Error(`Error uploading study from file array: ${t.message||t.toString()}`)}}async uploadDatasetFromDicomWeb({orderId:t,wadoUrl:e,studyUid:r,username:a=null,password:i=null,callback:n=null}){try{if(!t||!e||!r)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");let s;await this.#n("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"),await this.#n("https://unpkg.com/dicomweb-client"),s=a&&i?new DICOMwebClient.api.DICOMwebClient({url:e,username:a,password:i}):new DICOMwebClient.api.DICOMwebClient({url:e}),n&&n({order_id:t,progress:0,status:`Retrieving instances from DICOMweb for study ${r}`});const o=await s.retrieveStudy({studyInstanceUID:r});if(!o||0===o.length)throw new Error(`No instances recieved from DICOMweb for study ${r}`);n&&n({order_id:t,progress:100,status:`Retrieving instances from DICOMweb for study ${r}`});let c=new JSZip;const h=o.length;let w=1,d=0;for(let e=0;e<o.length;e++){let r=o[e];const a=this.#i(),i=r,s=r.byteLength;if(d+s>this.maxZipSize&&d>0){const r=await c.generateAsync({type:"blob"}),a=w-1,i=await this.#t(t,String(a),t),n=await this.#a(i,t,String(a),t,w,r);e==h?await this.#r(t,t,String(a),i,[{PartNumber:w,ETag:n}],1):await this.#r(t,t,String(a),i,[{PartNumber:w,ETag:n}],0),c=new JSZip,d=0,w++}if(c.file(a,i,{binary:!0}),d+=s,n){let r=(e+1)/h*100;r=Math.round(100*r)/100,r=100===r?100:r,n({order_id:t,progress:r,status:`Uploaded instance ${e+1}/${o.length}`})}}if(d>0){const e=await c.generateAsync({type:"blob"}),r=w-1,a=await this.#t(t,String(r),t),i=await this.#a(a,t,String(r),t,w,e);await this.#r(t,t,String(r),a,[{PartNumber:w,ETag:i}],1)}return!0}catch(t){throw new Error(`Error uploading study from DICOMweb: ${t.message||t.toString()}`)}}async runJob({orderId:t,productName:e}){try{if(!t||!e)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const r=`${this.serverUrl}/api/runJob/`,a={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},i={orderId:t,productName:e},n=await this.#l(i,this.aesKey,"JSON","string"),s=await fetch(r,{method:"POST",headers:a,body:n});if(!s.ok)throw new Error(JSON.parse(await s.text()).error);return s.status}catch(t){throw new Error(`Job run failed: ${t.message||t.toString()}`)}}async checkStatus({orderId:t}){try{if(!t)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const e=`${this.serverUrl}/api/checkStatus/`,r={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},a={orderId:t},i=await this.#l(a,this.aesKey,"JSON","string"),n=await fetch(e,{method:"POST",headers:r,body:i});if(!n.ok)throw new Error(JSON.parse(await n.text()).error);const s=await n.text();return await this.#g(s,this.aesKey,"JSON")}catch(t){throw new Error(`Status check failed: ${t.message||t.toString()}`)}}async getResults({orderId:t,format:e,dataType:r="raw"}){try{if(!t||!e||!r)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");const a=`${this.serverUrl}/api/getResults/`,i={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType};e=String(e).toLowerCase(),r=String(r).toLowerCase();if(!["txt","xml","json","png","features"].includes(e))throw new Error("Invalid format.");const n={orderId:t,format:e},s=await this.#l(n,this.aesKey,"JSON","string"),o=await fetch(a,{method:"POST",headers:i,body:s});if(!o.ok)throw new Error(JSON.parse(await o.text()).error);const c=await o.text();let h;switch(e){case"txt":case"json":case"xml":case"features":h=await this.#g(c,this.aesKey,"string");break;case"png":h=await this.#g(c,this.aesKey,"Uint8Array")}if("raw"===r)return h;if("blob"!==r)throw new Error("Invalid data type.");switch(e){case"features":return new Blob([h],{type:"text/csv"});case"txt":return new Blob([h],{type:"text/plain"});case"json":return new Blob([h],{type:"application/json"});case"xml":return new Blob([h],{type:"application/xml"});case"png":return new Blob([h],{type:"image/png"})}}catch(t){throw new Error(`Result retrieval failed: ${t.message||t.toString()}`)}}async getReport({format:t,startDate:e,endDate:r}){try{if(!t||!e||!r)throw new Error("Parameter is missing.");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");let a,i;try{if(a=new Date(e),i=new Date(r),isNaN(a.getTime())||isNaN(i.getTime())||!/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(e)||!/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(r))throw new Error}catch(t){throw new Error("Invalid date format (MM/DD/YYYY).")}const n=new Date;if(n.setHours(23,59,59,999),i>n||a>n)throw new Error("Provided date must not exceed current date.");if(a>i)throw new Error("startDate must not exceed endDate.");const s=`${this.serverUrl}/api/getReport/`,o={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType};t=t.toLowerCase();if(!["txt","email","json"].includes(t))throw new Error("Invalid format.");const c={startDate:e,endDate:r,format:t},h=await this.#l(c,this.aesKey,"JSON","string"),w=await fetch(s,{method:"POST",headers:o,body:h});if(!w.ok)throw new Error(JSON.parse(await w.text()).error);const d=await w.text(),p=await this.#g(d,this.aesKey,"string");return"json"==t?JSON.parse(p):p}catch(t){throw new Error(`Report retrieval failed: ${t.message}`)}}async qcCheck({orderId:t,format:e}){try{if(!t||!e)throw new Error("Parameter is missing");if(!this.connectionId||!this.aesKey)throw new Error("Missing session parameters, start a new session with 'connect()' and try again.");e=String(e).toLowerCase();if(!["txt","csv","json"].includes(e))throw new Error("Invalid format.");const r=`${this.serverUrl}/api/qcCheck/`,a={"Content-Type":"text/plain","Connection-Id":this.connectionId,"Origin-Type":this.originType},i={orderId:t,format:e},n=await this.#l(i,this.aesKey,"JSON","string"),s=await fetch(r,{method:"POST",headers:a,body:n});if(!s.ok)throw new Error(JSON.parse(await s.text()).error);const o=await s.text();let c;return c="json"==e?await this.#g(o,this.aesKey,"JSON"):await this.#g(o,this.aesKey,"string"),c}catch(t){throw new Error(`QC check failed: ${t.message||t.toString()}`)}}}
module.exports = Neuropacs;
